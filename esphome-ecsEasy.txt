substitutions:
  name: esphome-web-d40a20
  friendly_name: ECS Easy

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'
  on_boot:
    then:
      - number.set:
          id: valve_position
          value: !lambda
            return id(valve_position_globals);
      - number.set:
          id: display_brightness
          value: !lambda
            return id(display_intensity);

esp8266:
  board: esp01_1m
  restore_from_flash: true  # only needed for esp8266

preferences:
  flash_write_interval: 15min

# Enable logging
logger:

# API encryption
api:
  encryption:
    key: "HXkFuyOiePECUEPyfyMSodautL3hoj6uCHmth343EVI="

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ssid: !secret wifi_ssid
  password: !secret wifi_password
# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

globals:
  - id: display_status
    type: bool
    restore_value: no
    initial_value: "true"

  - id: display_on_boot
    type: bool
    restore_value: no
    initial_value: "false"

  - id: display_intensity
    type: uint8_t 
    restore_value: yes

  - id: valve_position_globals
    type: int
    restore_value: yes
  
dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: false
  id: bus_a
  frequency: 400kHz

gp8403:
  id: gp8403_10v
  voltage: 10v
  address: 0x5F

output:
  - platform: gp8403
    id: my_gp8403_output_1
    gp8403_id: gp8403_10v
    channel: 0
  - platform: gp8403
    id: my_gp8403_output_2
    gp8403_id: gp8403_10v
    channel: 1

# Example configuration entry
dallas:
  - pin: GPIO13

sensor:
  - platform: dallas
    address: 0x1809225373cffd28
    name: "Sonde Ballon"
    id: temp_ballon
  - platform: dallas
    address: 0x500822545c3ecd28
    name: "Sonde Retour"
    id: temp_retour
  - platform: dallas
    address: 0xed4b92d445819928
    name: "Sonde Ambiance"
    id: temp_ambiance

# To have a "next url" for improv serial
web_server:

time:
  - platform: homeassistant
    id: homeassistant_time

display:
  platform: tm1637
  clk_pin: GPIO12
  dio_pin: GPIO14
  id: display_screen
  inverted: True
  length: 4
  update_interval: 1000ms
  lambda: |-
      static bool display_on_boot = false;
      it.set_intensity(id(display_intensity));

      if (display_on_boot) {
        if (id(display_status) == true) {

          if (id(valve_position).state < 100) {
            it.printf("%2d%2d",int(id(temp_ballon).state),int(id(valve_position).state));
          } else {
            it.printf("%2d--",int(id(temp_ballon).state));
          }
        } else {
            it.printf("    ");
        }
      } else {
        it.printf("----");
        display_on_boot = true;
      }

number:
  - platform: template
    name: "Valve Position"
    id: valve_position
    optimistic: true
    min_value: 0
    max_value: 100
    step: 5
    mode: slider
    on_value:
      then:
        - output.set_level:
            id: my_gp8403_output_1
            level: !lambda 'return x/100.0;'
        - globals.set:
            id: valve_position_globals
            value: !lambda 'return x;'

  - platform: template
    name: "Display Brightness"
    id: display_brightness
    optimistic: true
    min_value: 0
    max_value: 7
    step: 1
    mode: slider
    on_value:
      then:
        - globals.set:
            id: display_intensity
            value: !lambda 'return x;'

switch:
  - platform: template
    name: "Display"
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: |-
      if (id(display_status) == true) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - globals.set:
          id: display_status
          value: 'true'
    turn_off_action:
      - globals.set:
          id: display_status
          value: 'false'
